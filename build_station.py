import argparse
import json

def main():
  parser = argparse.ArgumentParser(description='Converts stations from json to C++.')
  parser.add_argument('--json_input', help='Single station json input file.')
  parser.add_argument('--cpp_output', help='Single station output file.')
  parser.add_argument('--var_name', help='Name of the station variable in c++ file.')
  parser.add_argument('--name', help='Name of the station.')
  parser.add_argument('--desc', help='Description of the station.')
  parser.add_argument('--difficulty', help='Station difficulty.')
  parser.add_argument('--difficulty_str', help='Station difficulty name.')
  parser.add_argument('--jump_distance', help='Distance from which super jump starts.')
  args = parser.parse_args()

  print('Processing station, name: {}'.format(args.name))

  with open(args.json_input) as json_file, open(args.cpp_output, 'w') as cpp_file:
    json_input = json.loads(json_file.read())

    cpp_file.write('// clang-format off\n')
    cpp_file.write('// This file is autogenerated from {}\n'.format(args.json_input))
    cpp_file.write('\n')
    cpp_file.write('#include \"space_station_desc.hpp\"\n')
    cpp_file.write('\n')
    cpp_file.write('SpaceStationDesc Get{}Desc() {{\n'.format(args.var_name))
    cpp_file.write('  return SpaceStationDesc{\n')
    cpp_file.write('    .name{{"{}"}},\n'.format(args.name))
    cpp_file.write('    .desc{{"{}"}},\n'.format(args.desc))
    cpp_file.write('    .difficulty = {},\n'.format(args.difficulty))
    cpp_file.write('    .difficulty_str{{"{}"}},\n'.format(args.difficulty_str))
    cpp_file.write('    .jump_distance = {},\n'.format(args.jump_distance))
    cpp_file.write('    .asteroids{\n')

    for asteroid in json_input['asteroids']:
      cpp_file.write('      {\n')
      cpp_file.write('        .pos{{{}, {}}},\n'.format(asteroid['x'], asteroid['y']))
      cpp_file.write('        .radius = {},\n'.format(asteroid['r']))
      cpp_file.write('      },\n')

    cpp_file.write('    }\n')
    cpp_file.write('  };\n')
    cpp_file.write('}\n')
    cpp_file.write('// clang-format on\n')

if __name__ == "__main__":
  main()
